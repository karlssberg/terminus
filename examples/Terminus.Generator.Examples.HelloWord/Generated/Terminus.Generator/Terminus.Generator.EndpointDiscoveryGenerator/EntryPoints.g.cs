// <auto-generated/> Generated by Terminus EndpointDiscoveryGenerator
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Reflection;
using Terminus;
using Terminus.Strategies;

namespace Terminus.Generated
{
    public partial interface IMediator
    {
        void Handle(string message);
    }

    public partial class Mediator : IMediator
    {
        private readonly IServiceProvider _serviceProvider;
        public Mediator(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        public void Handle(string message)
        {
            using (var scope = _serviceProvider.CreateScope())
            {
                scope.ServiceProvider.GetRequiredService<Listener>().Handle(message);
            }
        }
    }

    public static partial class ServiceCollectionExtensions
    {
        public static IServiceCollection AddEntryPoints<TAttribute>(this IServiceCollection services)
            where TAttribute : EntryPointAttribute
        {
            var resolver = new ParameterBindingStrategyResolver();
            services.AddEntryPointsInternal<TAttribute>(resolver);
            return services;
        }

        public static IServiceCollection AddEntryPoints<TAttribute>(this IServiceCollection services, Action<ParameterBindingStrategyResolver> resolverConfigurator)
            where TAttribute : EntryPointAttribute
        {
            var resolver = new ParameterBindingStrategyResolver();
            resolverConfigurator(resolver);
            services.AddEntryPointsInternal<TAttribute>(resolver);
            return services;
        }

        public static IServiceCollection AddEntryPoints(this IServiceCollection services)
        {
            return services.AddEntryPoints<EntryPointAttribute>();
        }

        public static IServiceCollection AddEntryPoints(this IServiceCollection services, Action<ParameterBindingStrategyResolver> resolverConfigurator)
        {
            return services.AddEntryPoints<EntryPointAttribute>(resolverConfigurator);
        }

        private static IServiceCollection AddEntryPointsInternal<TAttribute>(this IServiceCollection services, ParameterBindingStrategyResolver resolver)
            where TAttribute : EntryPointAttribute
        {
            if (typeof(Terminus.EntryPointAttribute) == typeof(TAttribute))
            {
                services.AddSingleton<EntryPointDescriptor<TAttribute>>(new EntryPointDescriptor<TAttribute>(typeof(Listener).GetMethod("Handle", new System.Type[] { typeof(string) }), (instance, context) => ((Listener)instance).Handle(resolver.ResolveParameter<string>("message", context))));
            }
            else
            {
                throw new InvalidOperationException($"'{typeof(TAttribute)}' is not applied to any methods");
            }

            return services;
        }
    }
}