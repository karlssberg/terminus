// <auto-generated/> Generated by Terminus EndpointDiscoveryGenerator
#nullable enable
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Reflection;
using Terminus;
using Terminus.Attributes;
using Terminus.Strategies;

namespace Terminus.Generator.Examples.HelloWorld
{
    public partial interface IMediator
    {
        void Handle(string message);
    }

    internal sealed class IMediator_Generated : Terminus.Generator.Examples.HelloWorld.IMediator
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly ParameterBindingStrategyResolver _resolver;
        public IMediator_Generated(IServiceProvider serviceProvider, ParameterBindingStrategyResolver resolver)
        {
            _serviceProvider = serviceProvider;
            _resolver = resolver;
        }

        public void Handle(string message)
        {
            using (var scope = _serviceProvider.CreateScope())
            {
                var context = new ParameterBindingContext(string.Empty, typeof(object), scope.ServiceProvider, new System.Collections.Generic.Dictionary<string, object?> { { "message", message } });
                scope.ServiceProvider.GetRequiredService<Terminus.Generator.Examples.HelloWorld.Listener>().Handle(_resolver.ResolveParameter<string>("message", context));
            }
        }
    }
}

namespace Terminus.Generated
{
    public static partial class ServiceCollectionExtensions
    {
        public static IServiceCollection AddEntryPointsIMediator(this IServiceCollection services, Action<ParameterBindingStrategyResolver>? configure = null)
        {
            var resolver = new ParameterBindingStrategyResolver();
            configure?.Invoke(resolver);
            static EntryPointDescriptor<Terminus.Attributes.EntryPointAttribute> CreateDescriptor(MethodInfo method, ParameterBindingStrategyResolver resolver) => new EntryPointDescriptor<Terminus.Attributes.EntryPointAttribute>(method, (instance, context) =>
            {
                throw new NotImplementedException("Direct descriptor invocation not yet supported");
            });
            services.AddSingleton<EntryPointDescriptor<Terminus.Attributes.EntryPointAttribute>>(CreateDescriptor(typeof(Terminus.Generator.Examples.HelloWorld.Listener).GetMethod("Handle", new System.Type[] { typeof(string) })!, resolver));
            services.AddSingleton<Terminus.Generator.Examples.HelloWorld.IMediator, Terminus.Generator.Examples.HelloWorld.IMediator_Generated>();
            services.AddSingleton(resolver);
            return services;
        }
    }
}