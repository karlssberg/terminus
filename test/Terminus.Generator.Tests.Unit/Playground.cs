using Terminus;
using System;


using Microsoft.Extensions.DependencyInjection;
using System;
using System.Reflection;
using Terminus;
using Terminus.Attributes;
using Terminus.Strategies;

namespace Demo
{
    public class TestEndpoints
    {
        [EntryPoint]
        public static void Hello(string world) 
        { 
            Console.WriteLine($"hello {world}"); 
        }
    }
}
// <auto-generated/> Generated by Terminus EndpointDiscoveryGenerator
             
             namespace Terminus.Generated
             {
                 public partial interface IMediator
                 {
                     void Hello(string world);
                 }
             
                 public partial class Mediator : IMediator
                 {
                     private readonly IServiceProvider _serviceProvider;
                     public Mediator(IServiceProvider serviceProvider)
                     {
                         _serviceProvider = serviceProvider;
                     }
             
                     public void Hello(string world)
                     {
                         using (var scope = _serviceProvider.CreateScope())
                         {
                             Demo.TestEndpoints.Hello(world);
                         }
                     }
                 }
             
                 public static partial class ServiceCollectionExtensions
                 {
                     public static IServiceCollection AddEntryPoints<TAttribute>(this IServiceCollection services)
                         where TAttribute : EntryPointAttribute
                     {
                         var resolver = new ParameterBindingStrategyResolver();
                         services.AddEntryPointsInternal<TAttribute>(resolver);
                         return services;
                     }
             
                     public static IServiceCollection AddEntryPoints<TAttribute>(this IServiceCollection services, Action<ParameterBindingStrategyResolver> resolverConfigurator)
                         where TAttribute : EntryPointAttribute
                     {
                         var resolver = new ParameterBindingStrategyResolver();
                         resolverConfigurator(resolver);
                         services.AddEntryPointsInternal<TAttribute>(resolver);
                         return services;
                     }
             
                     public static IServiceCollection AddEntryPoints(this IServiceCollection services)
                     {
                         return services.AddEntryPoints<EntryPointAttribute>();
                     }
             
                     public static IServiceCollection AddEntryPoints(this IServiceCollection services, Action<ParameterBindingStrategyResolver> resolverConfigurator)
                     {
                         return services.AddEntryPoints<EntryPointAttribute>(resolverConfigurator);
                     }
             
                     private static IServiceCollection AddEntryPointsInternal<TAttribute>(this IServiceCollection services, ParameterBindingStrategyResolver resolver)
                         where TAttribute : EntryPointAttribute
                     {
                         if (typeof(Terminus.Attributes.EntryPointAttribute) == typeof(TAttribute))
                         {
                             services.AddSingleton<EntryPointDescriptor<TAttribute>>(new EntryPointDescriptor<TAttribute>(typeof(Demo.TestEndpoints).GetMethod("Hello", new System.Type[] { typeof(string) }), (instance, context) => Demo.TestEndpoints.Hello(resolver.ResolveParameter<string>("world", context))));
                         }
                         else
                         {
                             throw new InvalidOperationException($"'{typeof(TAttribute)}' is not applied to any methods");
                         }
             
                         return services;
                     }
                 }
             }