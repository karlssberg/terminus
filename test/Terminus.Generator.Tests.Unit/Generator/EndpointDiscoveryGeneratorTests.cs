using System.Text;
using Microsoft.CodeAnalysis.Text;
using Terminus.Generator.Tests.Unit.Generator.Infrastructure;

namespace Terminus.Generator.Tests.Unit.Generator;

public class EndpointDiscoveryGeneratorTests
{
    [Fact]
    public async Task Given_a_parameterless_method_Should_generate_entry_point_command()
    {
        const string source =
            """
            using Terminus;
            using System;

            namespace Demo
            {
                public class TestEndpoints
                {
                    [EntryPoint]
                    public static void Hello(string world) 
                    { 
                        Console.WriteLine($"hello {world}"); 
                    }
                }
            }
            """;

        const string expected =
             """
             // <auto-generated/> Generated by Terminus EndpointDiscoveryGenerator
             #if NET6_0_OR_GREATER
             #nullable enable
             #endif
             using Microsoft.Extensions.DependencyInjection;
             using System;
             using System.Reflection;
             using Terminus;
             using Terminus.Strategies;
             
             namespace Terminus.Generated
             {
                 public static class ServiceCollectionExtensions
                 {
                     public static IServiceCollection AddEntryPoints<TAttribute>(this IServiceCollection services, Action<ParameterBindingStrategyResolver>? resolverConfigurator = null)
                         where TAttribute : EntryPointAttribute
                     {
                         var resolver = new ParameterBindingStrategyResolver();
                         if (resolverConfigurator != null)
                         {
                             resolverConfigurator(resolver);
                         }
                         else
                         {
                             resolver.AddDefault();
                         }
             
                         if (typeof(Terminus.EntryPointAttribute) == typeof(TAttribute))
                         {
                             services.AddKeyedSingleton<EntryPointDescriptor>(typeof(TAttribute), new EntryPointDescriptor(typeof(Demo.TestEndpoints).GetMethod("Hello", new System.Type[] { typeof(string) }), (instance, context) => Demo.TestEndpoints.Hello(resolver.ResolveParameter<string>("world", context))));
                         }
                         else
                         {
                             throw new InvalidOperationException($"Attribute '{typeof(TAttribute)}' is not applied to any methods.");
                         }
             
                         return services;
                     }
             
                     public static IServiceCollection AddEntryPoints(this IServiceCollection services, Action<ParameterBindingStrategyResolver> resolverConfigurator) => services.AddEntryPoints<EntryPointAttribute>(resolverConfigurator);
                 }
             }
             """;

    var test = new TerminusSourceGeneratorTest<EndpointDiscoveryGenerator>
        {
            TestState =
            {
                Sources = { source }
            }
        };

        test.TestState.GeneratedSources.Add((typeof(EndpointDiscoveryGenerator), "EntryPoints.g.cs", SourceText.From(expected, Encoding.UTF8)));

        await test.RunAsync();
    }
}
