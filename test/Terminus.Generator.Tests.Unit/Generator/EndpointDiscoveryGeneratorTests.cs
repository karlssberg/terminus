using System.Text;
using Microsoft.CodeAnalysis.Text;
using Terminus.Generator.Tests.Unit.Generator.Infrastructure;

namespace Terminus.Generator.Tests.Unit.Generator;

public class EndpointDiscoveryGeneratorTests
{
    [Fact]
    public async Task Given_a_single_parameter_method_Should_generate_entry_point_command()
    {
        const string source =
            """
            using Terminus.Attributes;
            using System;

            namespace Demo
            {
                [EntryPointMediator]
                public partial interface IMediator;
                
                public class TestEndpoints
                {
                    [EntryPoint]
                    public static void Hello(string world) 
                    { 
                        Console.WriteLine($"hello {world}"); 
                    }
                }
            }
            """;

        const string expected =
            """
            // <auto-generated/> Generated by Terminus EndpointDiscoveryGenerator
            #nullable enable
            using Microsoft.Extensions.DependencyInjection;
            using System;
            using System.Reflection;
            using Terminus;
            using Terminus.Attributes;
            using Terminus.Strategies;
            
            namespace Demo
            {
                public partial interface IMediator
                {
                    void Hello(string world);
                }
            
                internal sealed class IMediator_Generated : Demo.IMediator
                {
                    private readonly IServiceProvider _serviceProvider;
                    private readonly ParameterBindingStrategyResolver _resolver;
                    public IMediator_Generated(IServiceProvider serviceProvider, ParameterBindingStrategyResolver resolver)
                    {
                        _serviceProvider = serviceProvider;
                        _resolver = resolver;
                    }
            
                    public void Hello(string world)
                    {
                        using (var scope = _serviceProvider.CreateScope())
                        {
                            var context = new ParameterBindingContext(string.Empty, typeof(object), scope.ServiceProvider, new System.Collections.Generic.Dictionary<string, object?> { { "world", world } });
                            Demo.TestEndpoints.Hello(_resolver.ResolveParameter<string>("world", context));
                        }
                    }
                }
            }
            
            namespace Terminus.Generated
            {
                public static partial class ServiceCollectionExtensions
                {
                    public static IServiceCollection AddEntryPointsIMediator(this IServiceCollection services, Action<ParameterBindingStrategyResolver>? configure = null)
                    {
                        var resolver = new ParameterBindingStrategyResolver();
                        configure?.Invoke(resolver);
                        static EntryPointDescriptor<Terminus.Attributes.EntryPointAttribute> CreateDescriptor(MethodInfo method, ParameterBindingStrategyResolver resolver) => new EntryPointDescriptor<Terminus.Attributes.EntryPointAttribute>(method, (instance, context) =>
                        {
                            throw new NotImplementedException("Direct descriptor invocation not yet supported");
                        });
                        services.AddSingleton<EntryPointDescriptor<Terminus.Attributes.EntryPointAttribute>>(CreateDescriptor(typeof(Demo.TestEndpoints).GetMethod("Hello", new System.Type[] { typeof(string) })!, resolver));
                        services.AddSingleton<Demo.IMediator, Demo.IMediator_Generated>();
                        services.AddSingleton(resolver);
                        return services;
                    }
                }
            }
            """;

    var test = new TerminusSourceGeneratorTest<EndpointDiscoveryGenerator>
        {
            TestState =
            {
                Sources = { source }
            }
        };

        test.TestState.GeneratedSources.Add((typeof(EndpointDiscoveryGenerator), "IMediator_Generated.g.cs", SourceText.From(expected, Encoding.UTF8)));

        await test.RunAsync();
    }
    
    
//     [Fact]
//     public async Task Given_a_parameterless_method_Should_generate_entry_point_command()
//     {
//         const string source =
//             """
//             using Terminus;
//             using System;
//
//             namespace Demo
//             {
//                 public class TestEndpoints
//                 {
//                     [EntryPoint]
//                     public static void Hello() 
//                     { 
//                     }
//                 }
//             }
//             """;
//
//         const string expected =
//             """
//             // <auto-generated/> Generated by Terminus EndpointDiscoveryGenerator
//             using Microsoft.Extensions.DependencyInjection;
//             using System;
//             using System.Reflection;
//             using Terminus;
//             using Terminus.Attributes;
//             using Terminus.Strategies;
//             
//             namespace Terminus.Generated
//             {
//                 public partial interface IMediator<TAttribute>: IMediator where TAttribute : EntryPointAttribute
//                 {
//                     void Hello();
//                 }
//             
//                 internal partial class Mediator_EntryPointAttribute : IMediator<EntryPointAttribute>
//                 {
//                     private readonly IServiceProvider _serviceProvider;
//                     public Mediator(IServiceProvider serviceProvider)
//                     {
//                         _serviceProvider = serviceProvider;
//                     }
//             
//                     public void Hello()
//                     {
//                         using (var scope = _serviceProvider.CreateScope())
//                         {
//                             Demo.TestEndpoints.Hello();
//                         }
//                     }
//                 }
//             
//                 public static partial class ServiceCollectionExtensions
//                 {
//                     public static IServiceCollection AddEntryPoints<TAttribute>(this IServiceCollection services)
//                         where TAttribute : EntryPointAttribute
//                     {
//                         var resolver = new ParameterBindingStrategyResolver();
//                         services.AddEntryPointsInternal<TAttribute>(resolver);
//                         services.AddSingleton<IMediator<TAttribute>, Mediator_EntryPointAttribute>();
//                         return services;
//                     }
//             
//                     public static IServiceCollection AddEntryPoints<TAttribute>(this IServiceCollection services, Action<ParameterBindingStrategyResolver> resolverConfigurator)
//                         where TAttribute : EntryPointAttribute
//                     {
//                         var resolver = new ParameterBindingStrategyResolver();
//                         resolverConfigurator(resolver);
//                         services.AddEntryPointsInternal<TAttribute>(resolver);
//                         services.AddSingleton<IMediator<TAttribute>, Mediator_EntryPointAttribute>();
//                         return services;
//                     }
//             
//                     public static IServiceCollection AddEntryPoints(this IServiceCollection services)
//                     {
//                         return services.AddEntryPoints<EntryPointAttribute>();
//                     }
//             
//                     public static IServiceCollection AddEntryPoints(this IServiceCollection services, Action<ParameterBindingStrategyResolver> resolverConfigurator)
//                     {
//                         return services.AddEntryPoints<EntryPointAttribute>(resolverConfigurator);
//                     }
//             
//                     private static IServiceCollection AddEntryPointsInternal<TAttribute>(this IServiceCollection services, ParameterBindingStrategyResolver resolver)
//                         where TAttribute : EntryPointAttribute
//                     {
//                         if (typeof(Terminus.EntryPointAttribute) == typeof(TAttribute))
//                         {
//                             services.AddSingleton<EntryPointDescriptor<TAttribute>>(new EntryPointDescriptor<TAttribute>(typeof(Demo.TestEndpoints).GetMethod("Hello", new System.Type[] { }), (instance, context) => Demo.TestEndpoints.Hello()));
//                         }
//                         else
//                         {
//                             throw new InvalidOperationException($"'{typeof(TAttribute)}' is not applied to any methods");
//                         }
//             
//                         return services;
//                     }
//                 }
//             }
//             """;
//
//     var test = new TerminusSourceGeneratorTest<EndpointDiscoveryGenerator>
//         {
//             TestState =
//             {
//                 Sources = { source }
//             }
//         };
//
//         test.TestState.GeneratedSources.Add((typeof(EndpointDiscoveryGenerator), "EntryPoints.g.cs", SourceText.From(expected, Encoding.UTF8)));
//
//         await test.RunAsync();
//     }
}
