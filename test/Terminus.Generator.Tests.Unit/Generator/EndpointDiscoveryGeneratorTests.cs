using System.Text;
using Microsoft.CodeAnalysis.Text;
using Terminus.Generator.Tests.Unit.Generator.Infrastructure;

namespace Terminus.Generator.Tests.Unit.Generator;

public class EndpointDiscoveryGeneratorTests
{
    [Fact]
    public async Task Given_a_parameterless_method_Should_generate_entry_point_command()
    {
        const string source = 
            """
            using Terminus;
            
            namespace Demo
            {
                public class TestEndpoints
                {
                    [EntryPoint]
                    public static void Hello(string world) 
                    { 
                        Console.WriteLine($"hello {world}"); 
                    }
                }
            }
            """;
        
        const string expected =
            """
            // <auto-generated/> Generated by Terminus EndpointDiscoveryGenerator
            #nullable enable
            
            using System;
            using Microsoft.Extensions.DependencyInjection;
            using System.Collections.Concurrent;
            using System.Reflection;
            using Terminus.Strategies;
            
            namespace Terminus.Generated
            {
                public class EntryPointCollector
                {
                    private readonly ParameterBindingStrategyResolver _resolver;
                    private ConcurrentDictionary<Key, IParameterBindingStrategy> _strategies = new ConcurrentDictionary<Key, IParameterBindingStrategy>();
                    public EntryPointInvoker(ParameterBindingStrategyResolver resolver)
                    {
                        _resolver = resolver;
                    }
                                            
                    public IReadOnlyList<EntryPointDescriptor> EntryPoints { get; } = new List<EntryPointDescriptor>
                    {
                        new EntryPointDescriptor(
                            typeof(Terminus.EntryPointAttribute),
                            typeof(Demo.TestEndpoint).GetMethod("Hello",new[] { typeof(string) }),
                            (instance, context) => instance.Hello((string)_strategies.GetOrAdd(new Key(typeof(), typeof(string)), _ => _resolver.GetStrategy(typeof(string), context)).Bind(context.ForParameter("world", typeof(string), hasDefault: false))!))) 
                    };
                }
                
                public static IServiceCollection AddEntryPoints<TAttribute>(this IServiceCollection services, Action<ParameterBindingStrategyResolver> resolverConfigurator)
                where TAttribute : EntryPointAttribute
                {
                    var resolver = new ParameterBindingStrategyResolver();
                    resolverConfigurator(resolver);
                    services.AddSingleton(resolver);
                    services.AddSingleton<EntryPointCollector>();
                    
                    return services;
                }
                
                public static IServiceCollection AddEntryPoints(this IServiceCollection services, Action<ParameterBindingStrategyResolver> resolverConfigurator) => 
                    services.AddEntryPoints<EntryPointAttribute>(resolverConfigurator);
                }
            """;

        var test = new TerminusSourceGeneratorTest<EndpointDiscoveryGenerator>
        {
            TestState =
            {
                Sources = { source }
            }
        };

        test.TestState.GeneratedSources.Add((typeof(EndpointDiscoveryGenerator), "EntryPoints.g.cs", SourceText.From(expected, Encoding.UTF8)));

        await test.RunAsync();
    }
}
