using System.Text;
using Microsoft.CodeAnalysis.Text;
using Terminus.Generator.Tests.Unit.Generator.Infrastructure;

namespace Terminus.Generator.Tests.Unit.Generator;

public class EndpointDiscoveryGeneratorTests
{
    [Fact]
    public async Task Given_a_single_parameter_method_Should_generate_entry_point_command()
    {
        const string source =
            """
            using Terminus.Attributes;
            using System;

            namespace Demo
            {
                [EntryPointMediator]
                public partial interface IMediator;
                
                public class TestEndpoints
                {
                    [EntryPoint]
                    public static void Hello(string world) 
                    { 
                        Console.WriteLine($"hello {world}"); 
                    }
                }
            }
            """;

        const string expected =
            """
            // <auto-generated/> Generated by Terminus EndpointDiscoveryGenerator
            #nullable enable
            using Microsoft.Extensions.DependencyInjection;
            using System;
            using System.Reflection;
            using Terminus;
            using Terminus.Attributes;
            using Terminus.Strategies;
            
            namespace Demo
            {
                public partial interface IMediator
                {
                    void Hello(string world);
                }
            
                internal sealed class IMediator_Generated : Demo.IMediator
                {
                    private readonly IServiceProvider _serviceProvider;
                    private readonly ParameterBindingStrategyResolver _resolver;
                    public IMediator_Generated(IServiceProvider serviceProvider, ParameterBindingStrategyResolver resolver)
                    {
                        _serviceProvider = serviceProvider;
                        _resolver = resolver;
                    }
            
                    public void Hello(string world)
                    {
                        using (var scope = _serviceProvider.CreateScope())
                        {
                            var context = new ParameterBindingContext(string.Empty, typeof(object), scope.ServiceProvider, new System.Collections.Generic.Dictionary<string, object?> { { "world", world } });
                            Demo.TestEndpoints.Hello(_resolver.ResolveParameter<string>("world", context));
                        }
                    }
                }
            }
            
            namespace Terminus.Generated
            {
                public static partial class ServiceCollectionExtensions
                {
                    public static IServiceCollection AddEntryPointsForIMediator(this IServiceCollection services, Action<ParameterBindingStrategyResolver>? configure = null)
                    {
                        var resolver = new ParameterBindingStrategyResolver();
                        configure?.Invoke(resolver);
                        static EntryPointDescriptor<Terminus.Attributes.EntryPointAttribute> CreateDescriptor(MethodInfo method, ParameterBindingStrategyResolver resolver) => new EntryPointDescriptor<Terminus.Attributes.EntryPointAttribute>(method, context =>
                        {
                            Demo.TestEndpoints.Hello(resolver.ResolveParameter<string>("world", context));
                        });
                        services.AddSingleton<EntryPointDescriptor<Terminus.Attributes.EntryPointAttribute>>(CreateDescriptor(typeof(Demo.TestEndpoints).GetMethod("Hello", new System.Type[] { typeof(string) })!, resolver));
                        services.AddSingleton<Demo.IMediator, Demo.IMediator_Generated>();
                        services.AddSingleton(resolver);
                        return services;
                    }
                }
            }
            """;

    var test = new TerminusSourceGeneratorTest<EndpointDiscoveryGenerator>
        {
            TestState =
            {
                Sources = { source }
            }
        };

        test.TestState.GeneratedSources.Add((typeof(EndpointDiscoveryGenerator), "IMediator_Generated.g.cs", SourceText.From(expected, Encoding.UTF8)));

        await test.RunAsync();
    }
    
    
     [Fact]
     public async Task Given_a_parameterless_method_Should_generate_entry_point_command()
     {
         const string source =
             """
             using Terminus.Attributes;
             using System;
             using System.Threading.Tasks;

             namespace Demo
             {
                 [EntryPointMediator]
                 public partial interface IMediator;
                 
                 public class TestEndpoints
                 {
                     [EntryPoint]
                     public Task Hello() 
                     { 
                         return Task.CompletedTask;
                     }
                 }
             }
             """;

         const string expected =
             """
             // <auto-generated/> Generated by Terminus EndpointDiscoveryGenerator
             #nullable enable
             using Microsoft.Extensions.DependencyInjection;
             using System;
             using System.Reflection;
             using Terminus;
             using Terminus.Attributes;
             using Terminus.Strategies;
             
             namespace Demo
             {
                 public partial interface IMediator
                 {
                     System.Threading.Tasks.Task Hello();
                 }
             
                 internal sealed class IMediator_Generated : Demo.IMediator
                 {
                     private readonly IServiceProvider _serviceProvider;
                     private readonly ParameterBindingStrategyResolver _resolver;
                     public IMediator_Generated(IServiceProvider serviceProvider, ParameterBindingStrategyResolver resolver)
                     {
                         _serviceProvider = serviceProvider;
                         _resolver = resolver;
                     }
             
                     public System.Threading.Tasks.Task Hello()
                     {
                         using (var scope = _serviceProvider.CreateScope())
                         {
                             var context = new ParameterBindingContext(string.Empty, typeof(object), scope.ServiceProvider, new System.Collections.Generic.Dictionary<string, object?> { });
                             return scope.ServiceProvider.GetRequiredService<Demo.TestEndpoints>().Hello();
                         }
                     }
                 }
             }
             
             namespace Terminus.Generated
             {
                 public static partial class ServiceCollectionExtensions
                 {
                     public static IServiceCollection AddEntryPointsForIMediator(this IServiceCollection services, Action<ParameterBindingStrategyResolver>? configure = null)
                     {
                         var resolver = new ParameterBindingStrategyResolver();
                         configure?.Invoke(resolver);
                         static EntryPointDescriptor<Terminus.Attributes.EntryPointAttribute> CreateDescriptor(MethodInfo method, ParameterBindingStrategyResolver resolver) => new EntryPointDescriptor<Terminus.Attributes.EntryPointAttribute>(method, context =>
                         {
                             return context.ServiceProvider.GetRequiredService<Demo.TestEndpoints>().Hello();
                         });
                         services.AddSingleton<EntryPointDescriptor<Terminus.Attributes.EntryPointAttribute>>(CreateDescriptor(typeof(Demo.TestEndpoints).GetMethod("Hello", new System.Type[] { })!, resolver));
                         services.AddSingleton<Demo.IMediator, Demo.IMediator_Generated>();
                         services.AddSingleton(resolver);
                         return services;
                     }
                 }
             }
             """;

     var test = new TerminusSourceGeneratorTest<EndpointDiscoveryGenerator>
         {
             TestState =
             {
                 Sources = { source }
             }
         };

         test.TestState.GeneratedSources.Add((typeof(EndpointDiscoveryGenerator), "IMediator_Generated.g.cs", SourceText.From(expected, Encoding.UTF8)));

         await test.RunAsync();
     }
}
