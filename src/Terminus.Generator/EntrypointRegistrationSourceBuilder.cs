using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Terminus.Generator;

internal static class EntrypointRegistrationSourceBuilder
{
    internal static CompilationUnitSyntax Generate(ImmutableArray<EntryPointMethodInfo> entryPoints)
    {
        var rawCompilationUnit =
          $$"""
            // <auto-generated/> Generated by Terminus EndpointDiscoveryGenerator
            using Microsoft.Extensions.DependencyInjection;
            using System;
            using System.Reflection;
            using Terminus;
            using Terminus.Strategies;

            namespace Terminus.Generated
            {
                {{CreateMediatorInterfaceDefinition(entryPoints).NormalizeWhitespace()}}
                
                {{CreateMediatorClassDefinition(entryPoints).NormalizeWhitespace()}}
            
                public static partial class ServiceCollectionExtensions
                {
                    public static IServiceCollection AddEntryPoints<TAttribute>(
                        this IServiceCollection services)
                        where TAttribute : EntryPointAttribute
                    {
                        var resolver = new ParameterBindingStrategyResolver();
                        services.AddEntryPointsInternal<TAttribute>(resolver);
                        return services;
                    }
                    
                    public static IServiceCollection AddEntryPoints<TAttribute>(
                        this IServiceCollection services,
                        Action<ParameterBindingStrategyResolver> resolverConfigurator)
                        where TAttribute : EntryPointAttribute
                    {
                        var resolver = new ParameterBindingStrategyResolver();
                        resolverConfigurator(resolver);
                        services.AddEntryPointsInternal<TAttribute>(resolver);
                        return services;
                    }
                    
                    public static IServiceCollection AddEntryPoints(this IServiceCollection services)
                    {
                        return services.AddEntryPoints<EntryPointAttribute>();
                    }
                    
                    public static IServiceCollection AddEntryPoints(this IServiceCollection services, Action<ParameterBindingStrategyResolver> resolverConfigurator)
                    {
                        return services.AddEntryPoints<EntryPointAttribute>(resolverConfigurator);
                    }
                    
                    private static IServiceCollection AddEntryPointsInternal<TAttribute>(
                        this IServiceCollection services,
                        ParameterBindingStrategyResolver resolver)
                        where TAttribute : EntryPointAttribute
                    {
                        {{CreateServiceRegistrationIfElseChain("TAttribute", entryPoints)}}
                        
                        return services;
                    }
                }
            }
            """;

        return ParseCompilationUnit(rawCompilationUnit).NormalizeWhitespace();
    }

    private static InterfaceDeclarationSyntax CreateMediatorInterfaceDefinition(ImmutableArray<EntryPointMethodInfo> entryPoints)
    {
        return InterfaceDeclaration("IMediator")
            .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.PartialKeyword)))
            .WithMembers(
            [
                ..entryPoints.Select(info => 
                    CreateEntryPointMethodHeaderDeclaration(info)
                        .WithSemicolonToken(Token(SyntaxKind.SemicolonToken)))
            ]);

    }

    private static ClassDeclarationSyntax CreateMediatorClassDefinition(ImmutableArray<EntryPointMethodInfo> entryPoints)
    {
        return ClassDeclaration("Mediator")
            .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.PartialKeyword)))
            .AddBaseListTypes(SimpleBaseType(ParseTypeName("IMediator")))
            .WithMembers(
            [
                ParseMemberDeclaration("private readonly IServiceProvider _serviceProvider;")!,
                ParseMemberDeclaration(
                    """
                    public Mediator(IServiceProvider serviceProvider)
                    {
                        _serviceProvider = serviceProvider;
                    }
                    """)!,
                ..entryPoints.Select(entryPoint => 
                    CreateEntryPointMethodHeaderDeclaration(entryPoint)
                        .WithModifiers([Token(SyntaxKind.PublicKeyword)])
                        .WithBody(CreateEntryPointMethodInvocationMethodBody(entryPoint)))
            ]);
    }

    private static BlockSyntax CreateEntryPointMethodInvocationMethodBody(EntryPointMethodInfo entryPoint)
    {
        // example:
        //     return scope.ServiceProvider.GetRequiredService<MyNamespace.MyClass>().Hello(world);
        var getServiceAndCallHello = InvocationExpression(
            MemberAccessExpression(
                SyntaxKind.SimpleMemberAccessExpression,
                entryPoint.MethodSymbol.IsStatic 
                    ? ParseExpression(entryPoint.MethodSymbol.ContainingType.ToDisplayString())
                    : InvocationExpression(
                        CreateScopeServiceProviderInvocation(entryPoint),
                        ArgumentList()
                ),
                IdentifierName(entryPoint.MethodSymbol.Name)
            ))
            .AddArgumentListArguments(entryPoint.MethodSymbol.Parameters
                .Select(parameter => Argument(ParseExpression(parameter.Name)))
                .ToArray()
            ); 
        
        // example:
        //     using (var scope = serviceProvider.CreateScope())
        //     {
        //         return scope.ServiceProvider.GetRequiredService<MyNamespace.MyClass>().Hello(world);
        //     }
        var usingStatement = UsingStatement(
                Block(
                    entryPoint.MethodSymbol.ReturnsVoid
                        ? ExpressionStatement(getServiceAndCallHello)
                        : ReturnStatement(getServiceAndCallHello)
                )
            )
            .WithDeclaration(
                VariableDeclaration(
                        IdentifierName(
                            Identifier(
                                TriviaList(),
                                SyntaxKind.VarKeyword,
                                "var",
                                "var",
                                TriviaList()
                            )
                        )
                    )
                    .WithVariables(
                        SingletonSeparatedList(
                            VariableDeclarator("scope")
                                .WithInitializer(
                                    EqualsValueClause(
                                        ParseExpression("_serviceProvider.CreateScope()")
                                    )
                                )
                        )
                    )
            );
        return Block(usingStatement);
    }

    private static MemberAccessExpressionSyntax CreateScopeServiceProviderInvocation(EntryPointMethodInfo entryPoint)
    {
        return MemberAccessExpression(
            SyntaxKind.SimpleMemberAccessExpression,
            MemberAccessExpression(
                SyntaxKind.SimpleMemberAccessExpression,
                IdentifierName("scope"),
                IdentifierName("ServiceProvider")
            ),
            GenericName("GetRequiredService")
                .WithTypeArgumentList(
                    TypeArgumentList(
                        SingletonSeparatedList(
                            ParseTypeName(entryPoint.MethodSymbol.ContainingType.ToDisplayString())
                        )
                    )
                )
        );
    }

    private static MethodDeclarationSyntax CreateEntryPointMethodHeaderDeclaration(EntryPointMethodInfo entryPoints)
    {
        return MethodDeclaration(ParseTypeName("void"), entryPoints.MethodSymbol.Name)
            .WithParameterList(
                ParameterList(
                    SeparatedList(
                        entryPoints.MethodSymbol.Parameters.Select(p =>
                            Parameter(Identifier(p.Name))
                                .WithType(ParseTypeName(p.Type.ToDisplayString()))
                        )
                    )
                )
            );
    }

    private static StatementSyntax CreateServiceRegistrationIfElseChain(
        string attributeGenericParameter,
        IEnumerable<EntryPointMethodInfo> entryPoints)
    {
        var ifElseChainSyntax = entryPoints
            .GroupBy<EntryPointMethodInfo, INamedTypeSymbol>(
                entry => entry.AttributeData.AttributeClass!,
                SymbolEqualityComparer.Default)
            .Select(groupedEntryPoints =>
            {
                var attributeType = groupedEntryPoints.Key;
                return IfStatement(
                    ParseExpression($"typeof({attributeType.ToDisplayString()}) == typeof({attributeGenericParameter})"),
                    Block(CreateServiceRegistrations(attributeGenericParameter, groupedEntryPoints)));
            })
            .Reverse()
            .Aggregate(
                (StatementSyntax)Block(
                    ThrowStatement(
                        ParseExpression("""new InvalidOperationException($"'{typeof(TAttribute)}' is not applied to any methods")"""))),
                (after, before) => before.WithElse(ElseClause(after)));
        
        return ifElseChainSyntax.NormalizeWhitespace();
    }
 
    private static IEnumerable<StatementSyntax> CreateServiceRegistrations(
        string attributeGenericParameter,
        IEnumerable<EntryPointMethodInfo> entryPoints)
    {
        var statements = entryPoints
            .Select(CreateRegistrationInvoker)
            .Select(source => ParseExpression(source))
            .Select(ExpressionStatement);

        return statements;
        
        string CreateRegistrationInvoker(EntryPointMethodInfo info)
        {
            return 
                $"""
                 services.AddSingleton<EntryPointDescriptor<{attributeGenericParameter}>>(
                     {CreateEntryPointDescriptorMappingSyntax(info)})
                 """;
        }
    }

    private static ExpressionSyntax CreateEntryPointDescriptorMappingSyntax(EntryPointMethodInfo info)
    {
        var containingType = info.MethodSymbol.ContainingType.ToDisplayString();
        var methodNameLiteral = LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(info.MethodSymbol.Name));

        // Build typeof(ContainingType).GetMethod("MethodName", new[] { typeof(ParamType1), ... })
        var typeOfContaining = ParseExpression($"typeof({containingType})");
        var getMethodMemberAccess = MemberAccessExpression(
            SyntaxKind.SimpleMemberAccessExpression,
            typeOfContaining,
            IdentifierName("GetMethod"));

        var typeArrayExpr = ArrayCreationExpression(
                ArrayType(ParseTypeName("System.Type")).WithoutRank())
            .WithInitializer(info.MethodSymbol.Parameters.Length == 0
                ? []
                : info.MethodSymbol.Parameters.Select(p => ParseExpression($"typeof({p.Type.ToDisplayString()})")));

        var getMethodInvocation = InvocationExpression(getMethodMemberAccess)
            .WithArguments(methodNameLiteral, typeArrayExpr)
            .NormalizeWhitespace();

        // Build invoker: static -> ContainingType.Method(args); instance -> ((ContainingType)instance).Method(args)
        var invocationTarget = info.MethodSymbol.IsStatic
            ? ParseExpression($"{containingType}.{info.MethodSymbol.Name}")
            : ParseExpression($"(({containingType})instance).{info.MethodSymbol.Name}");

        var instanceInvoke = InvocationExpression(invocationTarget)
            .WithArguments(CreateEntryPointMethodArguments(info))
            .NormalizeWhitespace();

        var source =
          $"""
            new EntryPointDescriptor<TAttribute>(
                {getMethodInvocation},
                (instance, context) => {instanceInvoke})
            """;
        return ParseExpression(source).NormalizeWhitespace();
    }

    private static IEnumerable<ExpressionSyntax> CreateEntryPointMethodArguments(EntryPointMethodInfo info)
    {
        return info.MethodSymbol.Parameters.Select(parameter =>
        {
            var paramType = parameter.Type.ToDisplayString();
            var source =
              $"""
                resolver.ResolveParameter<{paramType}>("{parameter.Name}", context)
                """;
            return ParseExpression(source);
        });
    }
}